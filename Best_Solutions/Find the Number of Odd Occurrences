QUESTION:
Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number in O(n) time & constant space.

A Simple Solution is to run two nested loops. The outer loop picks all elements one by one and inner loop counts number of occurrences of the element picked by outer loop. Time complexity of this solution is O(n2).

Below is the implementation of the brute force approach :
METHOD ONE:
#include<bits/stdc++.h> 
using namespace std; 
  
// Function to find the element  
// occurring odd number of times 
int getOddOccurrence(int arr[], int arr_size) 
{ 
    for (int i = 0; i < arr_size; i++) { 
          
        int count = 0; 
          
        for (int j = 0; j < arr_size; j++) 
        { 
            if (arr[i] == arr[j]) 
                count++; 
        } 
        if (count % 2 != 0) 
            return arr[i]; 
    } 
    return -1; 
} 
  
// driver code 
int main() 
    { 
        int arr[] = { 2, 3, 5, 4, 5, 2, 
                      4, 3, 5, 2, 4, 4, 2 }; 
        int n = sizeof(arr) / sizeof(arr[0]); 
  
        // Function calling 
        cout << getOddOccurrence(arr, n); 
  
        return 0; 
    } 
    
    
    A Better Solution is to use Hashing. Use array elements as key and their counts as value. Create an empty hash table. One by one traverse the given array elements and store counts. Time complexity of this solution is O(n). But it requires extra space for hashing.
    
   #include <bits/stdc++.h> 
using namespace std; 
  
// function to find the element  
// occurring odd number of times  
int getOddOccurrence(int arr[],int size) 
{ 
      
    // Defining HashMap in C++ 
    unordered_map<int, int> hash; 
  
    // Putting all elements into the HashMap  
    for(int i = 0; i < size; i++) 
    { 
        hash[arr[i]]++; 
    } 
    // Iterate through HashMap to check an element 
    // occurring odd number of times and return it 
    for(auto i : hash) 
    { 
        if(i.second % 2 != 0) 
        { 
            return i.first; 
        } 
    } 
    return -1; 
} 
  
// Driver code 
int main()  
{  
    int arr[] = { 2, 3, 5, 4, 5, 2, 4, 
                    3, 5, 2, 4, 4, 2 };  
    int n = sizeof(arr) / sizeof(arr[0]);  
      
    // Function calling  
    cout << getOddOccurrence(arr, n);  
  
    return 0;  
}  


The Best Solution is to do bitwise XOR of all the elements. XOR of all elements gives us odd occurring element. Please note that XOR of two elements is 0 if both elements are same and XOR of a number x with 0 is x.

Below is the implementation of the above approach.

#include <stdio.h> 
  
// Function to find element occurring 
// odd number of times 
int getOddOccurrence(int ar[], int ar_size) 
{ 
    int res = 0;  
    for (int i = 0; i < ar_size; i++)      
        res = res ^ ar[i]; 
      
    return res; 
} 
  
/* Driver function to test above function */
int main() 
{ 
    int ar[] = {2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}; 
    int n = sizeof(ar) / sizeof(ar[0]); 
      
    // Function calling 
    printf("%d", getOddOccurrence(ar, n)); 
    return 0; 
} 


